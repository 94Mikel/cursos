# Spring

Spring Framework es un marco de trabajo (framework) de código abierto para la plataforma Java, 
ampliamente utilizado en el desarrollo de aplicaciones empresariales. 
Spring proporciona un ecosistema robusto que facilita el desarrollo de aplicaciones modernas, 
ofreciendo soporte para una amplia variedad de características, como la inyección de dependencias, 
programación orientada a aspectos, y la gestión de transacciones, entre otras.

A continuación, te explico en detalle los aspectos clave de Spring en Java:

## Inversión de Control (IoC) y Contenedor de Dependencias

La **IoC (Inversion of Control)** es uno de los pilares fundamentales de Spring. 
En lugar de que el código de la aplicación controle explícitamente la creación y la gestión de dependencias, Spring lo hace por ti. 
Esto se logra a través del contenedor IoC, que es responsable de:
- Crear y gestionar el ciclo de vida de los objetos (beans).
- Resolver y proporcionar las dependencias necesarias para los objetos.

Spring utiliza **Inyección de Dependencias (DI)** para configurar beans, lo que reduce el acoplamiento entre componentes.

## Programación Orientada a Aspectos (AOP)
Spring permite implementar AOP (Aspect-Oriented Programming), lo que facilita la separación de preocupaciones transversales, como:
- Logging (registro de eventos).
- Seguridad.
- Gestión de transacciones.

Por ejemplo, puedes usar anotaciones como @Aspect y @Around para interceptar métodos 
y ejecutar lógica adicional sin modificar el código original.

## Soporte para Transacciones
Spring facilita la gestión de transacciones en aplicaciones empresariales. Puedes usar anotaciones 
como **@Transactional** para definir los límites de una transacción.
Spring asegura que la transacción sea gestionada automáticamente, incluyendo el commit y rollback en caso de errores.

## MVC de Spring
Spring proporciona un marco web basado en el patrón Modelo-Vista-Controlador (MVC) llamado Spring MVC. 
Esto facilita la creación de aplicaciones web al gestionar solicitudes HTTP y enlazarlas a métodos de controladores.


## Spring Boot
Aunque el Spring Framework es poderoso, puede ser complejo configurar una aplicación desde cero. 
Para simplificar este proceso, Spring introdujo Spring Boot, que proporciona:
- Configuración automática (auto-configuration).
- Un servidor embebido (como Tomcat o Jetty).
- Dependencias gestionadas y listas para usar.

Por ejemplo, con Spring Boot puedes crear una aplicación funcional en minutos con pocas líneas de configuración.

## Soporte para Integraciones y Microservicios
Spring facilita la creación de microservicios a través de herramientas como:
- **Spring Cloud**, que soporta descubrimiento de servicios, configuración distribuida y circuit breakers.
- **Spring Data**, para trabajar con bases de datos de manera simplificada.
- **Spring Security**, para implementar autenticación y autorización.

## Ventajas de Spring
- **Flexibilidad**: Puedes usar solo los módulos que necesites.
- **Ecosistema completo**: Incluye soporte para tareas comunes en desarrollo empresarial.
- **Comunidad activa**: Es uno de los frameworks más utilizados en el mundo Java.

**Spring es ideal para aplicaciones empresariales debido a su capacidad para manejar proyectos complejos y escalables, 
y sigue siendo una elección popular para el desarrollo de aplicaciones
modernas.**

# Spring boot

Ya no es necesario configurar las applicaciones con los ficheros xml u otro
tipo de configuraciones ya que lo hace spring boot. Configuraciones como:
- Spring initializer.
- Crear aplicaciones de cualquier tipo: rest api, WebSocket, web streaming, tasks.
- Desarrollo para la seguridad => simplified security.
- Soporte para SQL Y NoSQL
- Servidores de aplicaciones de manera embebida como Tomcat, Jetty y Undertow.
- Soluciones como LiveReload que hace actualizar de manera automatica nuestra
aplicacion web.
- Al utilizar sistemas de administracion de librerias como maven o gradle
podemos utilizar cualquier IDE de nuestra preferencia. Como **Spring Tool
Suite**, **intelliJ IDEA** o **NetBeans**.

## Dependencias y Herramientas de desarrollo
- **Spring Boot DevTools**
	- Permite reiniciar mas facilmente nuestro servidor de aplicaciones
	  embebido de tomcat.
	- Utilizar LiveReload: Nos propociona el renicio de nuestra
	aplicaciones de manera automática en nuestro navegador.
	
- **Lombok**
	- Poryecto simple pero poderoso. Reduce código como son los metodos
	  get y set dentro de una clase java.
	- Podemos agregar de manera automatica el manejo de log4j a nuestra
	clase java.

## WEB
- Spring web
	- Nos permite crear aplicaciones de tipo REST y aplicaciones web
	  utilizando Sping MVC

## Template engines
- Thymeleaf
	- Nos permite agregar paginas web de manera mas simple a nuestras
	  aplicaciones con Spring. Ya no utilizaremos JSP-S sino
	  utilizaremos esta tecnologia.(tecnologia de presentacion).
	  Utilizaremos para desplegar la aplicaciones en html.

## Apache Netbeans Plugin Spring
Descargar plugin de spring desde la web de netbeans para crear proyectos de
Spring desde la netbeans.

NetBeans => tools => plugins => Downloaded => add plugins => file => open => install.
NbSpringBoot 3.0 => next => accept => install => continue => RestartIdeNow.

### Crear proyecto Spring desde netbeans
file => new proyect => java with maven => Spring boot initializer proyect

----
----
----
----

# Thymeleaf
Thymeleaf es un motor de plantillas (template engine) para Java diseñado para procesar y generar código HTML, XML, JavaScript, 
CSS e incluso texto plano. 
Es ampliamente utilizado en el desarrollo de aplicaciones web con Spring Framework, especialmente en proyectos de tipo Spring Boot. 
La principal ventaja de Thymeleaf es que permite crear vistas dinámicas que pueden combinarse fácilmente con lógica del lado del servidor.

## Características principales de Thymeleaf
- Naturaleza amigable al diseñador (natural templates):
	- Thymeleaf genera HTML que sigue siendo perfectamente válido y funcional para los navegadores, 
	incluso antes de ser procesado por el servidor.
	- Esto permite que los diseñadores web trabajen directamente con las plantillas 
	sin preocuparse por las instrucciones del servidor que agrega el desarrollador.
- Integración con Spring Framework:
	- Thymeleaf se integra de manera nativa con Spring MVC y Spring Boot, 
	utilizando el modelo de datos del controlador para renderizar las vistas dinámicas.
	- Soporta fácilmente el paso de datos del backend al frontend mediante el modelo Model de Spring.
- Lenguaje de expresiones (Thymeleaf Expression Language, o EL):
	- Utiliza un lenguaje de expresiones propio, similar al de JSTL o JSP.
	- Por ejemplo:
		- **${variable}**: Para acceder a atributos o datos del modelo.
		- ***{variable}**: Para trabajar dentro del contexto de un formulario.
		- **#{mensaje}**: Para internacionalización (i18n).
- Soporte para plantillas y fragmentos reutilizables:
	- Permite dividir el diseño en fragmentos reutilizables, como encabezados, pies de página o menús.
	- Usa etiquetas como <th:insert> y <th:replace> para incluir estos fragmentos.
- Dinámico y declarativo:
	- Thymeleaf incluye una serie de atributos personalizados (th:*) que permiten dinamismo en el
	  contenido, como:
		- **th:text**: Cambiar el contenido de texto.
		- **th:href**: Generar URLs dinámicas.
		- **th:if / th:unless**: Condiciones para mostrar/ocultar elementos.
		- **th:each**: Iterar sobre listas o colecciones.

## Cómo funciona Thymeleaf
- Plantilla base HTML:
	- Una página HTML estándar se utiliza como plantilla base. 
	Contiene etiquetas personalizadas de Thymeleaf (th:*) para definir cómo se comportará el contenido dinámico.
- Controlador en Java:
	- Los datos que necesita Thymeleaf se envían desde el backend mediante un controlador.
- Renderización:
	- El motor de plantillas reemplaza las expresiones de Thymeleaf con los valores proporcionados en el modelo 
	y genera el HTML final para el navegador.

## Ventajas de Thymeleaf
- Plantillas amigables para desarrolladores y diseñadores.
- Fácil de aprender y usar con Spring.
- Soporte nativo para fragmentos reutilizables.
- Integración con funciones avanzadas de internacionalización.
- Capacidades declarativas y dinámicas sin necesidad de script adicional.

## Desventajas de Thymeleaf
- No es ideal para aplicaciones de una sola página (SPA, como Angular o React).
- Puede ser menos eficiente que motores como JSP en aplicaciones con gran carga de procesamiento.
- La lógica compleja de renderización debe manejarse en el backend.

